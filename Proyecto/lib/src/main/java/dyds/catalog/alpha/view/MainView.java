package dyds.catalog.alpha.view;

import dyds.catalog.alpha.presenter.LocalPresenter;
import dyds.catalog.alpha.presenter.OnlinePresenter;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

public class MainView {
	private JTextField textField1;
	private JButton goButton;
	private JPanel contentPane;
	private JTextPane textPane1;
	private JButton saveLocallyButton;
	private JTabbedPane tabbedPane1;
	private JPanel searchPanel;
	private JPanel storagePanel;
	private JComboBox comboBox1;
	private JTextPane textPane2;
	private JButton deleteButton;

	OnlinePresenter onlinePresenter;
	LocalPresenter localPresenter;

  	public MainView(OnlinePresenter onlinePresenter, LocalPresenter localPresenter, Object[] titlesArray) {
	  
  	  JFrame frame = new JFrame("Video Game Info Catalog");
  	  frame.setContentPane(contentPane);
  	  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  	  frame.pack();
  	  frame.setVisible(true);
  		
	  this.onlinePresenter = onlinePresenter;
	  this.localPresenter = localPresenter;
	  
	  comboBox1.setModel(new DefaultComboBoxModel(titlesArray));
	  textPane1.setContentType("text/html");
	  textPane2.setContentType("text/html");

	  goButton.addActionListener(new ActionListener() {
		  @Override public void actionPerformed(ActionEvent e) {    	  
			  onlinePresenter.searchArticle();
		  }
	  });

	  saveLocallyButton.addActionListener(new ActionListener() {
		  @Override
		  public void actionPerformed(ActionEvent actionEvent) {
			  onlinePresenter.saveLastSearchedArticle();
		  }
	  });

	  comboBox1.addActionListener(new ActionListener() {
		  @Override
		  public void actionPerformed(ActionEvent actionEvent) {
			  if(comboBox1.getSelectedIndex() > -1) {
				  localPresenter.selectEntry(comboBox1.getSelectedItem());
			  }				  
		  }
	  });

	  deleteButton.addActionListener(new ActionListener() {
		  @Override
		  public void actionPerformed(ActionEvent actionEvent) {
			  if(comboBox1.getSelectedIndex() > -1){
				  localPresenter.deleteEntry(comboBox1.getSelectedItem());
			  }

		  }
	  });
  	}

  	public void setWorkingStatus() {
  		for(Component c: this.searchPanel.getComponents()) c.setEnabled(false);
  		textPane1.setText("");
  	}

  	public void setWatingStatus() {
  		for(Component c: this.searchPanel.getComponents()) c.setEnabled(true);
  	}
  
  	public String getTitleText( ) {
  		return textField1.getText();
  	}
  
  	public void setExtractText(String text) {
  		textPane1.setText(text);
  	}
  	
  	public void setLocalExtractText(String text) {
  		textPane2.setText(text);
  	}
  	
  	public void updateLocalArray(Object[] titlesArray) {
  		comboBox1.setModel(new DefaultComboBoxModel(titlesArray));
  	}

  	public static String textToHtml(String text, String term) {

  		StringBuilder builder = new StringBuilder();

  		builder.append("<font face=\"arial\">");

  		String textWithBold = text
  				.replace("'", "`") //Replace to avoid SQL errors, we will have to find a workaround..
  				.replaceAll("(?i)" + term, "<b>" + term +"</b>"); //Highlight the search term in the extract

  		builder.append(textWithBold);

  		builder.append("</font>");

  		return builder.toString();
  	}
  
  {
	// GUI initializer generated by IntelliJ IDEA GUI Designer
	// >>> IMPORTANT!! <<<
	// DO NOT EDIT OR ADD ANY CODE HERE!
	    $$$setupUI$$$();
	  }
	
	  /**
	   * Method generated by IntelliJ IDEA GUI Designer
	   * >>> IMPORTANT!! <<<
	   * DO NOT edit this method OR call it in your code!
	   *
	   * @noinspection ALL
	   */
	  private void $$$setupUI$$$() {
	    contentPane = new JPanel();
	    contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
	    contentPane.setMinimumSize(new Dimension(400, 400));
	    contentPane.setOpaque(false);
	    contentPane.setPreferredSize(new Dimension(400, 400));
	    tabbedPane1 = new JTabbedPane();
	    contentPane.add(tabbedPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
	    searchPanel = new JPanel();
	    searchPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
	    tabbedPane1.addTab("Search in Wikipedia", searchPanel);
	    textField1 = new JTextField();
	    searchPanel.add(textField1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
	    goButton = new JButton();
	    goButton.setLabel("Search!");
	    goButton.setText("Search!");
	    searchPanel.add(goButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	    final JScrollPane scrollPane1 = new JScrollPane();
	    searchPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	    textPane1 = new JTextPane();
	    scrollPane1.setViewportView(textPane1);
	    saveLocallyButton = new JButton();
	    saveLocallyButton.setText("Save locally!");
	    searchPanel.add(saveLocallyButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	    storagePanel = new JPanel();
	    storagePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
	    tabbedPane1.addTab("Interact with Stored Info", storagePanel);
	    comboBox1 = new JComboBox();
	    storagePanel.add(comboBox1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	    final JScrollPane scrollPane2 = new JScrollPane();
	    storagePanel.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	    textPane2 = new JTextPane();
	    scrollPane2.setViewportView(textPane2);
	    deleteButton = new JButton();
	    deleteButton.setText("Delete!");
	    storagePanel.add(deleteButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	  }
	
	  /**
	   * @noinspection ALL
	   */
	  public JComponent $$$getRootComponent$$$() {
	    return contentPane;
	  }

}
